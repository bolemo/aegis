FWS_NAME='firewall-start-z_aegis.sh'
FWS_FILE="$ROOT_DIR/scripts/$FWS_NAME"
FWS_SYML="$FWS_DIR/$FWS_NAME"

# SCRIPT: firewall-start.sh ###################
check_firewall_start() {
  [ -x $FWS_SYML ] || return 1
  [ "$(sed 's/[[:space:]]\+/ /g' $FWS_SYML | grep -cF -- "[ -x $SC_NICEPATH ] && $SC_NICEPATH _fws")" = 1 ] || return 1
  if ! grep -qF -- 'IFS='\n'; for FWS in $(ls --color=never -1 /opt/scripts/firewall-start*.sh); do [ -x "$FWS" ] && { "$FWS"; FWS_FOUND=1; }; done' /mnt/optware/net-wall ||
     ! grep -qF -- '[ -z $FWS_FOUND ] && [ -x /root/firewall-start.sh ] && /root/firewall-start.sh' /mnt/optware/net-wall
    then return 1
  fi
  
  return 0
}

set_firewall_start() {
  # replace firewall-start.sh call in Voxel's net-wall
  sed -i '/if \[ -x \/opt\/scripts\/firewall-start\.sh \]; then/ {N;N;N;N; s/\<if\>.*\<fi\>/for FWS in $(ls --color=never \/opt\/scripts\/firewall-start*.sh); do [ -x "$FWS" ] \&\& { "$FWS"; FWS_FOUND=1; }; done\n\t[ -z $FWS_FOUND ] \&\& [ -x \/root\/firewall-start.sh ] \&\& \/root\/firewall-start.sh/}' /usr/sbin/net-wall
  # set firewall-start script
  echo -e "# Bolemo $SC_NAME\n[ -x $SC_NICEPATH ] && $SC_NICEPATH _fws" > "$FWS_FILE"
  [ -x "$FWS_FILE" ] || chmod +x "$FWS_FILE"
  # set symlink in FWS_DIR
  [ -d "$FWS_DIR" ] || mkdir -p "$FWS_DIR"
  \ln -sfn "$FWS_FILE" "$FWS_SYML"
}


# previous status
status() {
  echo -e "\033[1;36mStatus:\033[0m"
  
  # check firewall-start.sh script
  check_firewall_start && STAT_FWS='ok' || STAT_FWS=''
  
  # check post-mount.sh script if script on external drive
  if [ "$EXT_DRIVE" ]; then check_postmount && STAT_PM='ok' || STAT_PM=''; else STAT_PM='na'; fi
  
  # check iptables
  STAT_IPT="$(iptables -S 2>/dev/null | grep -F "$SC_ABR")"
  if [ "$STAT_IPT" ]; then
    _CT=$(echo "$STAT_IPT"|grep -c -- "-A ${SC_ABR}_... -j DROP")
    [ $_CT = 2 ] && STAT_IPT_PBM='' || STAT_IPT_PBM='y'
    
    _CT=$(echo "$STAT_IPT" | grep -cv -- "^-. $SC_ABR")
    if [ "$TUN_IF" ]
      then [ $_CT = 8 ] || STAT_IPT_PBM='y'
      else [ $_CT = 4 ] || STAT_IPT_PBM='y'
    fi
  
    case $(echo "$STAT_IPT"|grep -Fc -- "$IPSET_WL_NAME") in
      2) STAT_IPT_WL='y' ;;
      0) STAT_IPT_WL='' ;;
      *) STAT_IPT_PBM='y' ;;
    esac
  
    case $(echo "$STAT_IPT"|grep -Fc -- "$IPSET_WG_NAME") in
      2) STAT_IPT_WG='y' ;;
      0) STAT_IPT_WG='' ;;
      *) STAT_IPT_PBM='y' ;;
    esac
  
    _CT=$(echo "$STAT_IPT" | grep -cF -- "$WAN_IF -m set --match-set $IPSET_BL_NAME")
    [ $_CT = 4 ] && STAT_IPT_WAN='ok'
  
    if [ "$TUN_IF" ]; then
      _CT=$(echo "$STAT_IPT" | grep -cF -- "$TUN_IF -m set --match-set $IPSET_BL_NAME")
      [ $_CT = 4 ] && STAT_IPT_TUN='ok'
    else
      STAT_IPT_TUN='na'
    fi
  
    # check log    
    case $(echo "$STAT_IPT"| grep -c -- "-A ${SC_ABR}_... -j LOG --log-prefix") in
      2) STAT_LOG='y' ;;
      0) STAT_LOG='' ;;
      *) STAT_IPT_PBM='y' ;;
    esac
  fi
  # end check iptables
  
  # check ipset blocklist
  STAT_IPS="$(ipset -q list $IPSET_BL_NAME -t)"
  # check ipset whitelist
  STAT_IPS_WL="$(ipset -q list $IPSET_WL_NAME -t)"
  
  # check ipset WAN gateway whitelist
  STAT_IPS_WG="$(ipset -q list $IPSET_WG_NAME -t)"
  
  if [ "$WAN_GW" = '0.0.0.0' ]; then
    STAT_GW_IN_BL=''; STAT_GW_IN_WG=''
  else
    # check WAN gateway in ipset blocklist
    ipset -q test "$IPSET_BL_NAME" "$WAN_GW" && STAT_GW_IN_BL='y' || STAT_GW_IN_BL=''
    # check WAN gatewan in WAN gateway ipset whitelist
    ipset -q test "$IPSET_WG_NAME" "$WAN_GW" && STAT_GW_IN_WG='y' || STAT_GW_IN_WG=''
  fi
  
  # are settings clean?
  [ -z "$STAT_IPT$STAT_IPS$STAT_IPS_WL$STAT_IPS_WG$STAT_FWS$STAT_PM" ] && STAT_CLEAN='y' || STAT_CLEAN=''
  
  # master check
  if   [ "$STAT_IPT_PBM" ]; then
    _RETVAL=2
    echo -e "- \033[1;31mSomething is not right with iptables setup!\033[0m Use '$SC_NAME status -v' for more details"
  elif [ "$STAT_CLEAN" ]; then
    _RETVAL=2
    echo "- '$SC_NAME' is not active; Settings are clean."
  elif [ "$STAT_IPT_WAN" -a "$STAT_IPT_TUN" -a "$STAT_IPS" -a "$STAT_FWS" -a "$STAT_PM" ]; then
    _RETVAL=0
    echo -ne "- \033[1m'$SC_NAME' is set and active\033[0m"
    [ "$STAT_IPT_WAN" ] && echo -n " for WAN interface ($WAN_IF)"
    [ "$STAT_IPT_TUN" = 'ok' ] && echo -n " and VPN tunnel ($TUN_IF)"
    echo -e ".\n- Filtering $(count_ip_in_ipset $IPSET_BL_NAME) IP adresses."
    [ "$STAT_IPT_WL" ] && if [ "$STAT_IPS_WL" ]; then
      echo "- Bypassing $(count_ip_in_ipset $IPSET_WL_NAME) IP adresses."
    else
      _RETVAL=2
      echo -e "- \033[1;31mWhitelist is defined in ipset but not in iptables!\033[0m Use '$SC_NAME status -v' for more details"
    fi
    if [ "$STAT_GW_IN_BL" -a "$STAT_GW_IN_WG" -a "$STAT_IPT_WG" ]; then
      echo "- WAN gateway IP range is bypassed (because in blocklist)."
    elif [ -z "$STAT_GW_IN_BL$STAT_GW_IN_WG$STAT_IPT_WG" ]; then
      echo "- WAN gateway IP range does not need to be bypassed."
    else
      _RETVAL=2
      echo -e "- \033[1;31mSomething is not right with the WAN gateway bypass!\033[0m Use '$SC_NAME status -v' for more details"
    fi
  else
    _RETVAL=2
    echo -e "- \033[1;31mSomething is not right!\033[0m Use '$SC_NAME -v status' for more details"
  fi
  [ "$STAT_LOG" ] && echo "- Logging is on." || echo "- Logging is off."
  [ "$VERBOSE" ] || return 0
  
  # details
  echo -e "\033[1;36mDetailed status:\033[0m"
  if [ "$STAT_FWS" ]; then
    echo "- 'firewall-start.sh' exists with correct settings."
  else
    if [ "$STAT_CLEAN" ]
      then echo "- 'firewall-start.sh' does not exist or does not have '$SC_NAME' settings."
      else echo -e "- \033[1;31m'firewall-start.sh' does not exist or does not have '$SC_NAME' settings!\033[0m"
    fi
  fi
  if [ "$STAT_PM" ]; then
    [ "$STAT_PM" = 'ok' ] && echo "- 'post-mount.sh' exists with correct settings."
  else
    if [ "$STAT_CLEAN" ]
      then echo "- 'post-mount.sh' does not exist or does not have '$SC_NAME' settings."
      else echo -e "- \033[1;31m'post-mount.sh' does not exist or does not have '$SC_NAME' settings!\033[0m"
    fi
  fi
  
  # check iprange binary
  [ "$IPR_BIN" ] && echo "- 'iprange' is installed: $($IPR_BIN --version | head -n 1)" || echo "- 'iprange' is not installed."
  
  # dates
  echo "- Actual router time: $(/bin/date +'%Y-%m-%d %X')"
  [ -e "$BL_FILE" ] && echo "- Blocklist generation time: $(/bin/date +'%Y-%m-%d %X' -r $BL_FILE)"
  [ -e "$WL_FILE" ] && echo "- Whitelist generation time: $(/bin/date +'%Y-%m-%d %X' -r $WL_FILE)"
  
  # Status file
  if [ -r "$INFO_FILE" ]; then
    INFO_FROM=$(sed '1q;d' "$INFO_FILE")
    INFO_IPS=$(sed '2q;d' "$INFO_FILE")
    INFO_IPT=$(sed '3q;d' "$INFO_FILE")
    echo "- $SC_NAME engine last launch report:"
    echo -e "\033[35m     start time: $(/bin/date +'%Y-%m-%d %X' -r $INFO_FILE)"
    
    [ $((INFO_FROM & INFO_FROM_SC)) -eq 0 ] || echo "     origin: $SC_NAME script."
    [ $((INFO_FROM & INFO_FROM_PM)) -eq 0 ] || echo "     origin: 'post-mount.sh'."
    [ $((INFO_FROM & INFO_FROM_FWS)) -eq 0 ] || echo "     origin: 'firewall-start.sh'."
    
    [ $((INFO_IPS & INFO_IPS_BL_SAME)) -eq 0 ] || echo '     ipset: loaded blocklist identical to file.'
    [ $((INFO_IPS & INFO_IPS_BL_MISS)) -eq 0 ] || echo '     no blocklist file found!'
    [ $((INFO_IPS & INFO_IPS_BL_LOAD)) -eq 0 ] || echo '     ipset: blocklist from file loaded.'
    [ $((INFO_IPS & INFO_IPS_BL_NEW)) -eq 0 ] || echo '     ipset: empty blocklist loaded.'
    [ $((INFO_IPS & INFO_IPS_BL_KEEP)) -eq 0 ] || echo '     ipset: loaded blocklist kept.'
    [ $((INFO_IPS & INFO_IPS_BL_WGW)) -eq 0 ] || echo '     ipset: WAN gateway found in blocklist.'
    [ $((INFO_IPS & INFO_IPS_WG_ADD)) -eq 0 ] || echo '     ipset: WAN gateway bypass set.'
    [ $((INFO_IPS & INFO_IPS_WG_KEEP)) -eq 0 ] || echo '     ipset: WAN gateway bypass already set.'
    [ $((INFO_IPS & INFO_IPS_WL_SAME)) -eq 0 ] || echo '     ipset: loaded whitelist identical to file.'
    [ $((INFO_IPS & INFO_IPS_WL_MISS)) -eq 0 ] || echo '     no whitelist file found.'
    [ $((INFO_IPS & INFO_IPS_WL_LOAD)) -eq 0 ] || echo '     ipset: whitelist from file loaded.'
    [ $((INFO_IPS & INFO_IPS_WL_KEEP)) -eq 0 ] || echo '     ipset: loaded whitelist kept.'
    
    [ $((INFO_IPT & INFO_IPT_SRC_KEEP)) -eq 0 ] || echo '     iptables: engine inbound chain already set.'
    [ $((INFO_IPT & INFO_IPT_DST_KEEP)) -eq 0 ] || echo '     iptables: engine outbound chain already set.'
    if [ $((INFO_IPT & INFO_IPT_LOG)) -ne 0 ]; then
      if [ $((INFO_IPT & INFO_IPT_LOG_SRC_NEW)) -ne 0 ]
        then echo '     iptables: inbound logging rules (re)set.'
        else echo '     iptables: inbound logging rules already set.'
      fi
      if [ $((INFO_IPT & INFO_IPT_LOG_DST_NEW)) -ne 0 ]
        then echo '     iptables: outbound logging rules (re)set.'
        else echo '     iptables: outbound logging rules already set.'
      fi
    fi
    if [ $((INFO_IPT & INFO_IPT_WG)) -ne 0 ]; then
      if [ $((INFO_IPT & INFO_IPT_WG_SRC_NEW)) -ne 0 ]
        then echo '     iptables: inbound WAN gateway bypass rules (re)set.'
        else echo '     iptables: inbound WAN gateway bypass rules already set.'
      fi
      if [ $((INFO_IPT & INFO_IPT_WG_DST_NEW)) -ne 0 ]
        then echo '     iptables: outbound WAN gateway bypass rules (re)set.'
        else echo '     iptables: outbound WAN gateway bypass rules already set.'
      fi
    fi
    if [ $((INFO_IPT & INFO_IPT_WL)) -ne 0 ]; then
      if [ $((INFO_IPT & INFO_IPT_WL_SRC_NEW)) -ne 0 ]
        then echo '     iptables: inbound whitelist rules (re)set.'
        else echo '     iptables: inbound whitelist rules already set.'
      fi
      if [ $((INFO_IPT & INFO_IPT_WL_DST_NEW)) -ne 0 ]
        then echo '     iptables: outbound whitelist rules (re)set.'
        else echo '     iptables: outbound whitelist rules already set.'
      fi
    fi
    [ $((INFO_IPT & INFO_IPT_WAN_PBM)) -eq 0 ] || echo '     iptables: WAN rules reset.'
    [ $((INFO_IPT & INFO_IPT_WAN_NEW)) -eq 0 ] || echo '     iptables: WAN rules set.'
    [ $((INFO_IPT & INFO_IPT_WAN_KEEP)) -eq 0 ] || echo '     iptables: WAN rules already set.'
    [ $((INFO_IPT & INFO_IPT_TUN_PBM)) -eq 0 ] || echo '     iptables: VPN rules reset.'
    [ $((INFO_IPT & INFO_IPT_TUN_NEW)) -eq 0 ] || echo '     iptables: VPN rules set.'
    [ $((INFO_IPT & INFO_IPT_TUN_KEEP)) -eq 0 ] || echo '     iptables: VPN rules already set.'
    echo -ne "\033[0m"
  else
    echo '- No status file found.'
  fi
  
  if [ "$STAT_IPT" ]; then
    if [ "$STAT_IPT_PBM" ]; then
      echo -e "- \033[31miptables rules are not set properly\033[0m:"
      [ -z "$STAT_IPT_TUN" ] && echo -e "     \033[31miptables rules are not set for VPN tunnel ($TUN_IF)\033[0m"
    else
      echo "- iptables rules are set:"
    fi
    [ "$STAT_IPT_WAN" ] && echo -e "     \033[36mWAN interface ($WAN_IF) rules are set\033[0m"
    [ "$STAT_IPT_TUN" = 'ok' ] && echo -e "     \033[36mVPN tunnel interface ($TUN_IF) rules are set\033[0m"
    [ "$STAT_IPT_WL" ] && echo -e "     \033[36mwhitelist rules are set\033[0m"
    [ "$STAT_IPT_WG" ] && echo -e "     \033[36mWAN gateway bypass rules are set\033[0m"
    echo -ne "\033[35m"
    echo "$STAT_IPT" | sed -e 's/^/     iptables /g'
    echo -ne "\033[0m"
  else
    echo "- iptables rules are not set."
  fi
  if [ "$STAT_LOG" ];
    then echo "- Logging is active."
    else echo "- Logging is inactive."
  fi
  if [ "$STAT_IPS" ]; then
    echo "- ipset blocklist is set:"
    if [ "$STAT_GW_IN_BL" ]
      then if [ "$STAT_GW_IN_WG" ]
        then echo -e "     \033[36mWAN gateway ($WAN_GW) is in blocklist\033[0m"
        else echo -e "     \033[31mWAN gateway ($WAN_GW) is in blocklist (but not bypassed)!\033[0m"
      fi
    fi
    echo -e "\033[35m$STAT_IPS\033[0m" | sed -e 's/^/     /g'
  else
    echo "- ipset blocklist is not set."
  fi
  
  if [ "$STAT_IPS_WL" ]; then
    echo "- ipset whitelist is set:"
    echo -e "\033[35m$STAT_IPS_WL\033[0m" | sed -e 's/^/     /g'
  else
    echo "- ipset whitelist is not set."
  fi
  
  if [ "$STAT_IPS_WG" ]; then
    echo "- ipset WAN gateway bypass is set:"
    [ "$STAT_GW_IN_BL" ] || echo -e "     \033[31mWAN gateway IP ($WAN_GW) is NOT in blocklist!\033[0m"
    if [ "$STAT_GW_IN_WG" ]
        then echo -e "     \033[36mWAN gateway ($WAN_GW) is in bypass list\033[0m"
        else echo -e "     \033[31mWAN gateway ($WAN_GW) is NOT in bypass list!\033[0m"
    fi
    echo -e "\033[35m$STAT_IPS_WG\033[0m" | sed -e 's/^/     /g'
  else
    [ "$STAT_GW_IN_BL" ] && _CLR='\033[31m' || _CLR='\033[0m'
    echo -e "${_CLR}- ipset WAN gateway bypass is not set.\033[0m"
  fi
}
