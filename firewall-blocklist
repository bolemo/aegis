#! /bin/sh

SC_NAME="firewall-blocklist"
WAN_GATEWAY="$(nvram get wan_gateway)"
IPSET_NAME="blocklist"
IPSET_WL_NAME="whitelist"
ROOT_DIR="/opt/bolemo"
IP_LIST="$ROOT_DIR/etc/$SC_NAME.netset"

#we are called from firewall_start.sh
if [ $1 ] && [ $1 = "_fws" ]; then
  ipset -! create $IPSET_WL_NAME bitmap:ip range "$WAN_GATEWAY/31"
  ipset -q add $IPSET_WL_NAME "$WAN_GATEWAY"
  if [ ! "$(ipset list -n | grep "$IPSET_NAME")" ]; then
    if [ -r $IP_LIST ]; then
      echo -e "create $IPSET_NAME hash:net family inet\n$(sed "s/^/add $IPSET_NAME /" $IP_LIST)" | ipset restore
    else
      ipset create $IPSET_NAME hash:net family inet
    fi
  fi
  iptables -I INPUT   -i brwan -m set --match-set $IPSET_NAME src -j DROP  
  iptables -I FORWARD -i brwan -m set --match-set $IPSET_NAME src -j DROP  
  iptables -I INPUT   -i brwan -m set --match-set $IPSET_WL_NAME src -j ACCEPT  
  iptables -I FORWARD -i brwan -m set --match-set $IPSET_WL_NAME src -j ACCEPT

  exit 0
fi

SC_VERS="v1.5.5"
SC_PATH="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
IPSET_TMP="${IPSET_NAME}_tmp"
SC_NICEPATH="$ROOT_DIR/scripts/$SC_NAME"
SRC_LIST="$ROOT_DIR/etc/$SC_NAME.sources"
TMP_FILE="$IP_LIST.tmp"
FWS_DIR="/opt/scripts"
FWS_FILE="$FWS_DIR/firewall-start.sh"

check_firewall_start() {
  [ -x $FWS_FILE ] || return 1
  [ "$(sed 's/[[:space:]]\+/ /g' $FWS_FILE | grep -c -- "\[ -x $SC_NICEPATH \] && $SC_NICEPATH _fws")" = 1 ] || return 1
  return 0
}

create_firewall_start() {
  [ -d "$FWS_DIR" ] || mkdir -p "$FWS_DIR"
  [ -e "$FWS_FILE" ] && sed -i "/$SC_NAME/d" "$FWS_FILE"
  echo "[ -x $SC_NICEPATH ] && $SC_NICEPATH _fws" >> "$FWS_FILE"
  [ -x "$FWS_FILE" ] || chmod +x "$FWS_FILE"
}

last_avail_version() {
  echo "$(wget -qO- "https://api.github.com/repos/bolemo/firewall-blocklist/releases/latest" | jq -r .tag_name)"
}

test() {
  echo "$SC_NAME $SC_VERS - Test:"
  if [ -r "$SRC_LIST" ] && [ -d $(dirname "$IP_LIST") ] && [ -d $(dirname "$TMP_FILE") ];
    then echo "The script is properly installed."
    else echo "Something is wrong!"
  fi
  echo -ne "- Checking latest available version...\r"
  SC_LAST_VERS="$(last_avail_version)";
  if [ $SC_LAST_VERS ] && [ $SC_VERS = $SC_LAST_VERS ]
    then echo "- This is the last known version.       "
    else echo "- New version available: $SC_LAST_VERS       "
  fi
}

init() {
  [ $VERBOSE ] && echo "Initializing..."
  ipset -q destroy $IPSET_TMP
  if check_firewall_start; then
    [ $VERBOSE ] && echo "- $FWS_FILE is in place and ok"
  else
    create_firewall_start
    check_firewall_start || { >&2 echo "Problem with $FWS_FILE!"; exit 1; }
    [ $VERBOSE ] && echo "- $FWS_FILE was edited and is now ok."
  fi
  /usr/sbin/net-wall restart > /dev/null
  [ $VERBOSE ] && echo -e "- built-in firewall restarted.\nInitialization done."
}

clean() {
  [ $VERBOSE ] && echo "Cleaning..."
  if [ -e $FWS_FILE ]; then
    if [ "$(grep -v "$SC_NAME" $FWS_FILE | sed -e '/^[[:space:]]*$/d')" ]; then
      sed -i "/$SC_NAME/d" $FWS_FILE
      [ $VERBOSE ] && echo "- $FWS_FILE has some other rules; just removing ours."
    else
      rm $FWS_FILE
      [ $VERBOSE ] && echo "- $FWS_FILE has no other rules; deleting it."
    fi
  fi
  /usr/sbin/net-wall restart > /dev/null
  [ $VERBOSE ] && echo "- built-in firewall restarted."
  ipset -q destroy $IPSET_NAME
  ipset -q destroy $IPSET_WL_NAME
  ipset -q destroy $IPSET_TMP
  [ $VERBOSE ] && echo "- cleaned ipsets."
  [ -e $TMP_FILE ] && rm $TMP_FILE
  [ $VERBOSE ] && echo -e "- removed temporary files.\nCleaning done."
}

set_ipset() {
  [ -r $IP_LIST ] || { >&2 echo "$IP_LIST not readable!"; exit 1; }

  if [ $VERBOSE ]; then
    MAX="$(wc -l < $IP_LIST)"
    echo "Building ipset blocklist ($MAX entries)..."
  fi

  echo -e "create $IPSET_TMP hash:net family inet\n$(sed "s/^/add $IPSET_TMP /" $IP_LIST)" | ipset restore

  ipset swap $IPSET_NAME $IPSET_TMP
  ipset destroy $IPSET_TMP
}

update_iplist() {
  [ -r $SRC_LIST ] || { >&2 echo "$SRC_LIST not readable!"; exit 1; }

  :>"$TMP_FILE"
  # Process each source url
  [ $VERBOSE ] && echo "Downloading lists defined in $SRC_LIST"
  [ $VERBOSE ] && WGET_OPTS='-qO- --show-progress' || WGET_OPTS='-qO-'
  _NBOK=0; _TOT=0;
  grep -v "^[[:space:]*\#]" "$SRC_LIST" | \
  { while read -r URL; do
      _TOT=$((_TOT+1))
      [ $VERBOSE ] && echo "$_TOT) $URL"
      { { { { wget $WGET_OPTS "$URL"; echo $? >&3; } | grep '^[0-9]' | sed -e 's/;.*//' >>"$TMP_FILE"; } 3>&1; } | { read _EC; exit $_EC; } } 4>&1
      _EC=$?
      [ $_EC = 0 ] && _NBOK=$((_NBOK+1)) || >&2 echo "Wget error code $_EC! Could not download $URL"
    done
    [ $_NBOK = 0 ] && { >&2 echo "Could not get any list!"; rm "$TMP_FILE"; exit 1; }
    [ $_NBOK = $_TOT ] || >&2 echo "Downloaded only $_NBOK / $_TOT list(s)!"
  }
  [ $VERBOSE ] && echo "Removing duplicates..."
  sort "$TMP_FILE" | uniq > "$IP_LIST"
  rm "$TMP_FILE"
  [ $VERBOSE ] && echo "Done"
}

status() {
  echo "$SC_NAME $SC_VERS - Status:"
  check_firewall_start && STAT_FWS='ok' || STAT_FWS=''
  STAT_IPT_IN=$(iptables -S INPUT | grep -- "-A INPUT -i brwan -m set --match-set $IPSET_NAME src -j DROP")
  STAT_IPT_FW=$(iptables -S FORWARD | grep -- "-A FORWARD -i brwan -m set --match-set $IPSET_NAME src -j DROP")
  STAT_IPT_WL_IN=$(iptables -S INPUT | grep -- "-A INPUT -i brwan -m set --match-set $IPSET_WL_NAME src -j ACCEPT")
  STAT_IPT_WL_FW=$(iptables -S FORWARD | grep -- "-A FORWARD -i brwan -m set --match-set $IPSET_WL_NAME src -j ACCEPT")
  STAT_IPSET=$(ipset list $IPSET_NAME -t)
  STAT_IPSET_WL=$(ipset list $IPSET_WL_NAME -t)
  if   [ "$STAT_IPT_IN" -a "$STAT_IPT_FW" -a "$STAT_IPT_WL_IN" -a "$STAT_IPT_WL_FW" -a "$STAT_IPSET" -a "$STAT_IPSET_WL" -a "$STAT_FWS" ]; then echo -e "Firewall is set and active\n"
  elif [ -z "$STAT_IPT_IN$STAT_IPT_FW$STAT_IPT_WL_IN$STAT_IPT_WL_FW$STAT_IPSET$STAT_IPSET_WL$STAT_FWS" ]; then echo -e "Firewall is not active; Settings are clean\n"
  else echo -e "Something is not right! Use $SC_NAME -v status for more details\n"; fi
  [ $VERBOSE ] || return 0
  if [ "$STAT_FWS" ]; then
    echo "- $FWS_FILE exists with correct settings"
  else
    echo "- $FWS_FILE does not exist or does not have settings"
  fi
  if [ "$STAT_IPT_IN" ];
    then echo -e "- INPUT firewall filter is active:\n     iptables $STAT_IPT_IN"
    else echo "- INPUT firewall filter is inactive"
  fi
  if [ "$STAT_IPT_FW" ];
    then echo -e "- FORWARD firewall filter is active:\n     iptables $STAT_IPT_FW"
    else echo "- FORWARD firewall filter inactive"
  fi
  if [ "$STAT_IPT_WL_IN" ];
    then echo -e "- INPUT firewall whitelist is active:\n     iptables $STAT_IPT_WL_IN"
    else echo "- INPUT firewall whitelist inactive"
  fi
  if [ "$STAT_IPT_WL_FW" ];
    then echo -e "- FORWARD firewall whitelist is active:\n     iptables $STAT_IPT_WL_FW"
    else echo "- FORWARD firewall whitelist inactive"
  fi
  if [ "$STAT_IPSET" ]; then
    echo "- ipset filter is set:"
    echo "$STAT_IPSET" | sed -e 's/^/     /g'
  else
    echo "- ipset filter does not exist"
  fi
  if [ "$STAT_IPSET_WL" ]; then
    echo "- ipset whitelist is set:"
    echo "$STAT_IPSET_WL" | sed -e 's/^/     /g'
  else
    echo "- ipset whitelist does not exist"
  fi
}

print_help() {
  echo "Usage: $SC_NICEPATH [-v] COMMAND"
  echo "Valid commands (only one):"
  echo " init        - setup ipset and iptables for this script to work"
  echo " clean       - clean ipset and iptables rules from setup created by this script"
  echo " load_set    - populates ipset set from $IP_LIST after performing init"
  echo " update_only - generates $IP_LIST from servers in $SRC_LIST"
  echo " update      - update_only then load_set [probably what you want to use]"
  echo " status      - display status"
  echo " test        - check if this script is installed properly"
  echo " help        - display this"
  echo "Options:"
  echo " -v          - verbose mode"
}

# Main routine
[ $# = 0 ] && { >&2 echo "No parameter!"; print_help; exit 1; }

if [ "$1" != "_niced" ]; then
  if [ "$1" = "-v" ]; then
    [ $# = 1 ] && { >&2 echo "No parameter!"; print_help; exit 1; }
    PARAM="$2"; VERB="_verbose"
  elif [ $# = 2 ] && [ "$2" = "-v" ]; then
    PARAM="$1"; VERB="_verbose"
  else
    PARAM="$1"; VERB=''
  fi
  nice -n 15 "$SC_PATH/$SC_NAME" _niced "$PARAM" "$VERB"
  exit $?
fi

VERBOSE=$3
[ $VERBOSE ] && echo -e "Verbose mode\n$SC_NAME version $SC_VERS"

case $2 in
  "init") init; [ $VERBOSE ] && status ;;
  "clean") clean; [ $VERBOSE ] && status ;;
  "load_set") init; set_ipset; [ $VERBOSE ] && status ;;
  "update_only") update_iplist ;;
  "update") init; update_iplist; set_ipset; [ $VERBOSE ] && status ;;
  "status") status ;;
  "help") print_help ;;
  "test") test ;;
  *) >&2 echo "Unknown Parameter $2!"; print_help; exit 1 ;;
esac

exit 0
