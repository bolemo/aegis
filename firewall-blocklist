#! /bin/sh

SC_NAME="firewall-blocklist"
SC_ABR="FwBl"
IPTBL_NAME="${SC_ABR}_DROP"
IPSET_NAME="${SC_ABR}_BL"
IPSET_WL_NAME="${SC_ABR}_WL"
# IPT_MD5 depends on IPTBL_NAME, IPSET_NAME and IPSET_WL_NAME
IPT_MD5="770406b8f204a584178c61857075443e  -"
ROOT_DIR="/opt/bolemo"
IP_LIST="$ROOT_DIR/etc/$SC_NAME.netset"

#we are called from firewall_start.sh
if [ $1 ] && [ $1 = "_fws" ]; then
  WAN_GATEWAY="$(nvram get wan_gateway)"
  WAN_NETMASK="$(nvram get wan_netmask)"
  [ "$(nvram get log_firewall_blocklist)" = "1" ] && LOGGING='y' || LOGGING=''
  # Calculate WAN_RANGE
  _BITS=0
  for _OCTET in $(echo $WAN_NETMASK| sed 's/\./ /g'); do
    _BINBITS=$(echo "obase=2; ibase=10; ${_OCTET}"| bc | sed 's/0//g')
    let _BITS+=${#_BINBITS}
  done
  WAN_RANGE="$WAN_GATEWAY/$_BITS"
  if ipset -q list "$IPSET_WL_NAME"; then
    ipset -q destroy "$IPSET_TMP"
    ipset -q create "$IPSET_TMP" hash:net family inet maxelem 1
    ipset -q add "$IPSET_TMP" "$WAN_RANGE"
    ipset -q swap "$IPSET_WL_NAME" "$IPSET_TMP"
    ipset -q destroy "$IPSET_TMP"
  else
    ipset -q create "$IPSET_WL_NAME" hash:net family inet maxelem 1
    ipset -q add "$IPSET_WL_NAME" "$WAN_RANGE"
  fi
  if ! ipset -q list "$IPSET_NAME"; then
    if [ -r $IP_LIST ]; then
      echo -e "create "$IPSET_NAME" hash:net family inet\n$(sed "s/^/add $IPSET_NAME /" "$IP_LIST")" | ipset restore
    else
      ipset -q create "$IPSET_NAME" hash:net family inet
    fi
  fi
  iptables -N "$IPTBL_NAME"
  [ $LOGGING ] && iptables -A "$IPTBL_NAME" -j LOG --log-prefix "[$SC_NAME] "
  iptables -A "$IPTBL_NAME" -j DROP
  iptables -I INPUT 1 -i brwan -m set --match-set "$IPSET_WL_NAME" src -j ACCEPT
  iptables -I INPUT 2 -i brwan -m set --match-set "$IPSET_NAME" src -j $IPTBL_NAME
  iptables -I OUTPUT 1 -o brwan -m set --match-set "$IPSET_WL_NAME" dst -j ACCEPT
  iptables -I OUTPUT 2 -o brwan -m set --match-set "$IPSET_NAME" dst -j $IPTBL_NAME
  iptables -I FORWARD 1 -i brwan -m set --match-set "$IPSET_WL_NAME" src -j ACCEPT
  iptables -I FORWARD 2 -i brwan -m set --match-set "$IPSET_NAME" src -j $IPTBL_NAME
  iptables -I FORWARD 3 -o brwan -m set --match-set "$IPSET_WL_NAME" dst -j ACCEPT
  iptables -I FORWARD 4 -o brwan -m set --match-set "$IPSET_NAME" dst -j $IPTBL_NAME

  exit 0
fi

SC_VERS="v2.5"
SC_PATH="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
IPR_BIN="$ROOT_DIR/bin/iprange"
IPSET_TMP="${IPSET_NAME}_tmp"
SC_NICEPATH="$ROOT_DIR/scripts/$SC_NAME"
SRC_LIST="$ROOT_DIR/etc/$SC_NAME.sources"
TMP_FILE="/tmp/$SC_NAME.tmp"
FWS_DIR="/opt/scripts"
FWS_FILE="$FWS_DIR/firewall-start.sh"

upgrade() {
  [ $VERBOSE ] && echo -e "\033[1;36mUpgrading:\033[0m"
  if [ $DEVMODE ]; then
    [ $VERBOSE ] && echo -ne "- Devmode on, force downloading dev version..."
    UPGRADE_URL="https://raw.githubusercontent.com/bolemo/firewall-blocklist/dev/firewall-blocklist"
  else
    [ $VERBOSE ] && echo -ne "- Checking latest available version...\r"
    SC_LAST_VERS="$(last_avail_version)";
    if [ $SC_LAST_VERS ]
      then if [ $SC_VERS = $SC_LAST_VERS ]
        then [ $VERBOSE ] && { echo "- This is already the last version.         "; exit 0; }
        else [ $VERBOSE ] && echo "- New version found: $SC_LAST_VERS                 "
      fi
      else
        >&2 echo -e "\033[31m! Could not check what is the last version online!\033[0m"
        exit 1
    fi
    UPGRADE_URL="https://raw.githubusercontent.com/bolemo/firewall-blocklist/master/firewall-blocklist"
  fi
  [ $VERBOSE ] && echo "- Downloading:"

  DL_PATH="/tmp/$SC_NAME.dl"
  [ $VERBOSE ] && { _PROG='--show-progress'; echo -ne "\033[35m"; } || _PROG=''
  if wget -qO "$DL_PATH" $_PROG "$UPGRADE_URL"; then
    \mv "$DL_PATH" "$SC_NICEPATH"
    chmod +x "$SC_NICEPATH"
    [ $VERBOSE ] && echo -e "\033[0m- Script installed to $SC_NICEPATH"
  else
    [ $VERBOSE ] && echo -ne "\033[0m"
    >&2 echo -e "\033[31m! Wget error code $?! Could not download $DL_PATH\033[0m"
    rm -f "$DL_PATH"
    exit 1
  fi

  exit 0
}

check_firewall_start() {
  [ -x $FWS_FILE ] || return 1
  [ "$(sed 's/[[:space:]]\+/ /g' $FWS_FILE | grep -c -- "\[ -x $SC_NICEPATH \] && $SC_NICEPATH _fws")" = 1 ] || return 1
  return 0
}

create_firewall_start() {
  [ -d "$FWS_DIR" ] || mkdir -p "$FWS_DIR"
  [ -e "$FWS_FILE" ] && sed -i "/$SC_NAME/d" "$FWS_FILE"
  echo "[ -x $SC_NICEPATH ] && $SC_NICEPATH _fws" >> "$FWS_FILE"
  [ -x "$FWS_FILE" ] || chmod +x "$FWS_FILE"
}

last_avail_version() {
  echo "$(wget -qO- "https://api.github.com/repos/bolemo/firewall-blocklist/releases/latest" | jq -r .tag_name)"
}

count_ip_in_file() {
  if [ -x $IPR_BIN ]
    then $IPR_BIN -C "$1" | sed -n 's/.*,//p'
    else grep -oE '(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\/([0-9]{1,2})' "$1" | awk -F / '{ count[$2]++ } END { for (mask in count) total+=count[mask]*2^(32-mask); print total }'
  fi
}

count_ip_in_ipset() {
  if [ -x $IPR_BIN ]
    then ipset list $1 | sed -n '/Members:/,$p' | tail -n +2 | $IPR_BIN -C | sed -n 's/.*,//p'
    else ipset list $1 | sed -n '/Members:/,$p' | tail -n +2 | grep -oE '(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\/([0-9]{1,2})' | awk -F / '{ count[$2]++ } END { for (mask in count) total+=count[mask]*2^(32-mask); print total }'
  fi
}

info() {
  echo -e "\033[1;36mTest:\033[0m"
  if [ -r "$SRC_LIST" ] && [ -d $(dirname "$IP_LIST") ] && [ -d $(dirname "$TMP_FILE") ];
    then echo "- The script is properly installed."
    else echo -e "\033[31m! Something is wrong with installation!\033[0m"
  fi
  echo "- $SC_NAME version: $SC_VERS"
  echo -ne "- Checking latest available version...\r"
  SC_LAST_VERS="$(last_avail_version)";
  if [ $SC_LAST_VERS ]
    then if [ $SC_VERS = $SC_LAST_VERS ]
      then echo "- This is the last version.            "
      else echo -e "\033[35m- Lastest version available: $SC_LAST_VERS       \033[0m"
    fi
    else echo -e "\033[31m! Could not check what is the last version online!\033[0m"
  fi
}

init() {
  [ $VERBOSE ] && echo -e "\033[1;36mInitializing...\033[0m"
  ipset -q destroy $IPSET_TMP
  if check_firewall_start; then
    [ $VERBOSE ] && echo "- $FWS_FILE is in place and ok"
  else
    create_firewall_start
    check_firewall_start || { >&2 echo -e "\033[31m! Problem with $FWS_FILE!\033[0m"; exit 1; }
    [ $VERBOSE ] && echo "- $FWS_FILE was edited and is now ok."
  fi
  /usr/sbin/net-wall restart > /dev/null
  [ $VERBOSE ] && echo -e "- Built-in firewall restarted.\n- Initialization done."
}

clean() {
  [ $VERBOSE ] && echo -e "\033[1;36mCleaning...\033[0m"
  if [ -e $FWS_FILE ]; then
    if [ "$(grep -v "$SC_NAME" $FWS_FILE | sed -e '/^[[:space:]]*$/d')" ]; then
      sed -i "/$SC_NAME/d" $FWS_FILE
      [ $VERBOSE ] && echo "- $FWS_FILE has some other rules; removed only our rules."
    else
      rm $FWS_FILE
      [ $VERBOSE ] && echo "- $FWS_FILE has no other rules; removed it."
    fi
  fi
  /usr/sbin/net-wall restart > /dev/null
  [ $VERBOSE ] && echo "- Built-in firewall restarted."
  ipset -q destroy $IPSET_NAME
  ipset -q destroy $IPSET_WL_NAME
  ipset -q destroy $IPSET_TMP
  [ $VERBOSE ] && echo "- Cleaned ipsets."
  [ -e $TMP_FILE ] && rm $TMP_FILE
  [ $VERBOSE ] && echo -e "- Removed temporary files.\n- Cleaning done."
}

set_ipset() {
  [ -r $IP_LIST ] || { >&2 echo -e "\033[31m! $IP_LIST not readable!\033[0m"; exit 1; }

  if [ $VERBOSE ]; then
    MAX="$(wc -l < $IP_LIST)"
    NUM_IP="$(count_ip_in_file $IP_LIST)"
    echo -e "\033[1;36mBuilding ipset blocklist ($MAX entries blocking $NUM_IP ips)...\033[0m"
  fi

  echo -e "create $IPSET_TMP hash:net family inet\n$(sed "s/^/add $IPSET_TMP /" $IP_LIST)" | ipset restore

  ipset swap $IPSET_NAME $IPSET_TMP
  ipset destroy $IPSET_TMP
}

update_iplist() {
  [ $VERBOSE ] && echo -e "\033[1;36mUpdating blocklist from sources...\033[0m"
  [ -r $SRC_LIST ] || { >&2 echo -e "\033[31m! $SRC_LIST not readable!\033[0m"; exit 1; }

  :>"$TMP_FILE"
  # Process each source url
  [ $VERBOSE ] && echo "- Downloading lists defined in $SRC_LIST"
  [ $VERBOSE ] && WGET_OPTS='-qO- --show-progress' || WGET_OPTS='-qO-'
  _NBOK=0; _TOT=0;
  grep -v "^[[:space:]*\#]" "$SRC_LIST" | \
  { while read -r URL; do
      _TOT=$((_TOT+1))
      [ $VERBOSE ] && echo -e "$_TOT) $URL\033[35m"
      { { { { wget $WGET_OPTS "$URL"; echo $? >&3; } | grep '^[0-9]' | sed -e 's/;.*//' >>"$TMP_FILE"; } 3>&1; } | { read _EC; exit $_EC; } } 4>&1
      _EC=$?
      [ $VERBOSE ] && echo -e "\033[0m"
      [ $_EC = 0 ] && _NBOK=$((_NBOK+1)) || >&2 echo -e "\033[31m! Wget error code $_EC! Could not download $URL\033[0m"
    done
    [ $_NBOK = 0 ] && { >&2 echo -e "\033[31m! Could not get any list!\033[0m"; rm "$TMP_FILE"; exit 1; }
    [ $_NBOK = $_TOT ] || >&2 echo -e "\033[31m! Downloaded only $_NBOK / $_TOT list(s)!\033[0m"
  }
  if [ -x $IPR_BIN ]; then
    [ $VERBOSE ] && echo "- Optimizing and reducing netset (using iprange)..."
    $IPR_BIN "$TMP_FILE" --ipset-reduce 20 > "$IP_LIST"
  else
    [ $VERBOSE ] && echo -e "- iprange not installed, passing optimization and reduction process.\n- Removing duplicates..."
    sort "$TMP_FILE" | uniq > "$IP_LIST"
  fi
  rm "$TMP_FILE"
  [ $VERBOSE ] && echo "- Done."
}

status() {
  echo -e "\033[1;36mStatus:\033[0m\n- $SC_NAME version: $SC_VERS"
  [ -x $IPR_BIN ] && echo "- iprange is installed: $($IPR_BIN --version | head -n 1)" || echo "- iprange is not installed."
  check_firewall_start && STAT_FWS='ok' || STAT_FWS=''
  STAT_IPT="$(iptables -S 2>/dev/null | grep -F "$SC_ABR" | grep -Fv "LOG")"
  [ "$IPT_MD5" = "$(echo "$STAT_IPT" | md5sum -)" ] && STAT_IPT_MATCH='ok' || STAT_IPT_MATCH=''
  STAT_LOG="$(iptables -S $IPTBL_NAME 2>/dev/null | grep -- "-A $IPTBL_NAME -j LOG --log-prefix")"
  STAT_IPS="$(ipset -q list $IPSET_NAME -t)"
  STAT_IPS_WL="$(ipset -q list $IPSET_WL_NAME -t)"
  if   [ "$STAT_IPT_MATCH" -a "$STAT_IPS" -a "$STAT_IPS_WL" -a "$STAT_FWS" ]; then echo -e "- Firewall is set and active.\n- Filtering $(count_ip_in_ipset $IPSET_NAME) ips."
  elif [ -z "$STAT_IPT$STAT_IPS$STAT_IPS_WL$STAT_FWS" ]; then echo "- Firewall is not active; Settings are clean."
  else echo -e "- \033[1;31mSomething is not right!\033[0m Use $SC_NAME -v status for more details"; fi
  [ "$STAT_LOG" ] && echo "- Logging is on." || echo "- Logging is off."
  [ $VERBOSE ] || return 0
  echo -e "\033[1;36mDetailed status:\033[0m"
  if [ "$STAT_FWS" ]; then
    echo "- $FWS_FILE exists with correct settings."
  else
    echo "- $FWS_FILE does not exist or does not have settings."
  fi
  if [ "$STAT_IPT" ]; then
    if [ "$STAT_IPT_MATCH" ]
      then echo -e "- iptables rules are set:"
      else echo -e "- \033[31miptables rules are not set properly\033[0m:"
    fi
    echo -ne "\033[35m"
    echo "$STAT_IPT" | sed -e 's/^/     iptables /g'
    echo -ne "\033[0m"
  else
    echo "- iptables rules are not set."
  fi
  if [ "$STAT_LOG" ];
    then echo -e "- Logging is active:\n\033[35m     iptables $STAT_LOG\033[0m"
    else echo "- Logging is inactive."
  fi
  if [ "$STAT_IPS" ]; then
    echo "- ipset filter is set:"
    echo -e "\033[35m$STAT_IPS\033[0m" | sed -e 's/^/     /g'
  else
    echo "- ipset filter does not exist."
  fi
  if [ "$STAT_IPS_WL" ]; then
    echo "- ipset whitelist is set:"
    echo -e "\033[35m$STAT_IPS_WL\033[0m" | sed -e 's/^/     /g'
  else
    echo "- ipset whitelist does not exist."
  fi
}

print_help() {
  echo -e "\033[1;36m$SC_NAME $SC_VERS\033[0m"
  echo -e "Usage: \033[1m$SC_NICEPATH \033[36m[-v] \033[35mCOMMAND\033[0m"
  echo -e "\033[7mValid commands (only one):\033[0m"
  echo -e " \033[1;35minit\033[0m        - setup ipset and iptables for this script to work"
  echo -e " \033[1;35mclean\033[0m       - clean ipset and iptables rules from setup created by this script"
  echo -e " \033[1;35mload_set\033[0m    - populates ipset set from $IP_LIST after performing init"
  echo -e " \033[1;35mupdate_only\033[0m - generates $IP_LIST from servers in $SRC_LIST"
  echo -e " \033[1;35mupdate\033[0m      - update_only then load_set [probably what you want to use]"
  echo -e " \033[1;35mstatus\033[0m      - display status"
  echo -e " \033[1;35minfo\033[0m        - check if this script is installed properly"
  echo -e " \033[1;35mupgrade\033[0m     - download and install latest version"
  echo -e " \033[1;35mhelp\033[0m        - display this"
  echo -e "\033[7mOptions:\033[0m"
  echo -e " \033[1;36m-v\033[0m          - verbose mode"
}

# Main routine
[ $# = 0 ] && { >&2 echo -e "\033[31m! No parameter!\033[0m"; print_help; exit 1; }

if [ "$1" != "_niced" ]; then
  OPTS=''
  [ -z "${*##* -v*}" ] && OPTS='_verbose'
  [ -z "${*##* --devmode*}" ] && OPTS="${OPTS}_devmode"
  PARAM="$(echo "$*" | /bin/sed 's/-[[:alpha:]]*//g' | sed 's/ //g')"
  [ $PARAM ] || { >&2 echo -e "\033[31m! No parameter!\033[0m"; print_help; exit 1; }

  nice -n 15 "$SC_PATH/$SC_NAME" _niced "$PARAM" "$OPTS"
  exit $?
fi

if [ "$3" ]; then
  [ -z "${3##*devmode*}" ] && DEVMODE='y'
  [ -z "${3##*verbose*}" ] && VERBOSE='y'
fi
[ $VERBOSE ] && echo -e "\033[31m$SC_NAME $SC_VERS - Verbose mode\033[0m"
[ $DEVMODE ] && { echo -e "\033[7;31m$SC_NAME $SC_VERS - Developer mode\033[0m"; VERBOSE='y'; }

case $2 in
  "init") init; [ $VERBOSE ] && status ;;
  "clean") clean; [ $VERBOSE ] && status ;;
  "load_set") init; set_ipset; [ $VERBOSE ] && status ;;
  "update_only") update_iplist ;;
  "update") init; update_iplist; set_ipset; [ $VERBOSE ] && status ;;
  "status") status ;;
  "help") print_help ;;
  "info") info ;;
  "upgrade") upgrade ;;
  *) >&2 echo -e "\033[31m! Unknown Parameter $2!\033[0m"; print_help; exit 1 ;;
esac

exit 0
